library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;
use ieee.math_complex.all;
use work.complex_pkg.all;

entity fft is
    port (
        clk : in std_logic;
        rst : in std_logic;
        data_in : in complex_array(0 to 31);
        data_out : out complex_array(0 to 31)
    );
end fft; 

architecture rtl of fft is
    signal data_out_s : complex_array(0 to 31);

    -- Twiddle factors for each iteration of the FFT
    -- constant twiddles_list : complex_array(0 to 79) := (
    --     0 => (32768,0),
    --     1 => (32768,0),
    --     2 => (32768,0),
    --     3 => (0,-32768),
    --     4 => (32768,0),
    --     5 => (32768,0),
    --     6 => (32768,0),
    --     7 => (0,-32768),
    --     8 => (32768,0),
    --     9 => (23170,-23170),
    --     10 => (0,-32768),
    --     11 => (-23170,-23170),
    --     12 => (32768,0),
    --     13 => (32768,0),
    --     14 => (32768,0),
    --     15 => (0,-32768),
    --     16 => (32768,0),
    --     17 => (32768,0),
    --     18 => (32768,0),
    --     19 => (0,-32768),
    --     20 => (32768,0),
    --     21 => (23170,-23170),
    --     22 => (0,-32768),
    --     23 => (-23170,-23170),
    --     24 => (32768,0),
    --     25 => (30273,-12539),
    --     26 => (23170,-23170),
    --     27 => (12539,-30273),
    --     28 => (0,-32768),
    --     29 => (-12539,-30273),
    --     30 => (-23170,-23170),
    --     31 => (-30273,-12539),
    --     32 => (32768,0),
    --     33 => (32768,0),
    --     34 => (32768,0),
    --     35 => (0,-32768),
    --     36 => (32768,0),
    --     37 => (32768,0),
    --     38 => (32768,0),
    --     39 => (0,-32768),
    --     40 => (32768,0),
    --     41 => (23170,-23170),
    --     42 => (0,-32768),
    --     43 => (-23170,-23170),
    --     44 => (32768,0),
    --     45 => (32768,0),
    --     46 => (32768,0),
    --     47 => (0,-32768),
    --     48 => (32768,0),
    --     49 => (32768,0),
    --     50 => (32768,0),
    --     51 => (0,-32768),
    --     52 => (32768,0),
    --     53 => (23170,-23170),
    --     54 => (0,-32768),
    --     55 => (-23170,-23170),
    --     56 => (32768,0),
    --     57 => (30273,-12539),
    --     58 => (23170,-23170),
    --     59 => (12539,-30273),
    --     60 => (0,-32768),
    --     61 => (-12539,-30273),
    --     62 => (-23170,-23170),
    --     63 => (-30273,-12539),
    --     64 => (32768,0),
    --     65 => (32138,-6392),
    --     66 => (30273,-12539),
    --     67 => (27245,-18204),
    --     68 => (23170,-23170),
    --     69 => (18204,-27245),
    --     70 => (12539,-30273),
    --     71 => (6392,-32138),
    --     72 => (0,-32768),
    --     73 => (-6392,-32138),
    --     74 => (-12539,-30273),
    --     75 => (-18204,-27245),
    --     76 => (-23170,-23170),
    --     77 => (-27245,-18204),
    --     78 => (-30273,-12539),
    --     79 => (-32138,-6392)
    -- );

    -- Recursive FFT function
    function fft_recursive(
        data_in : complex_array;
        len : integer;
        stride : integer;
        offset : integer
    ) return complex_array is
        variable data_out : complex_array(0 to len-1);
        variable data_even : complex_array(0 to (len/2)-1);
        variable data_odd : complex_array(0 to (len/2)-1);
        variable data_even_fft : complex_array(0 to (len/2)-1);
        variable data_odd_fft : complex_array(0 to (len/2)-1);
        variable twiddle : complex_t;
    begin
        if len = 2 then
            data_out(0) := cmplx_add(data_in(offset), data_in(offset+stride));
            data_out(1) := cmplx_sub(data_in(offset), data_in(offset+stride));
        else
            data_even := fft_recursive(data_in, len/2, stride*2, offset);
            data_odd := fft_recursive(data_in, len/2, stride*2, offset+stride);
            for i in 0 to (len/2)-1 loop
                twiddle := twiddles_list(i*stride);
                data_even_fft(i) := cmplx_mul(cmplx_add(data_even(i), data_odd(i)), twiddle);
                data_odd_fft(i) := cmplx_mul(cmplx_sub(data_even(i), data_odd(i)), twiddle);
            end loop;
            for i in 0 to (len/2)-1 loop
                data_out(i*2) := data_even_fft(i);
                data_out(i*2+1) := data_odd_fft(i);
            end loop;
        end if;
        return data_out;
    end function fft_recursive;

    constant twiddle_table : complex_vector(0 to 79) := (
        0 => (1.0,0.0),
        1 => (1.0,0.0),
        2 => (1.0,0.0),
        3 => (1.0,0.0),
        4 => (1.0,0.0),
        5 => (1.0,0.0),
        6 => (1.0,0.0),
        7 => (1.0,0.0),
        8 => (1.0,0.0),
        9 => (1.0,0.0),
        10 => (1.0,0.0),
        11 => (1.0,0.0),
        12 => (1.0,0.0),
        13 => (1.0,0.0),
        14 => (1.0,0.0),
        15 => (1.0,0.0),
        16 => (1.0,0.0),
        17 => (0.0,-1.0),
        18 => (1.0,0.0),
        19 => (0.0,-1.0),
        20 => (1.0,0.0),
        21 => (0.0,-1.0),
        22 => (1.0,0.0),
        23 => (0.0,-1.0),
        24 => (1.0,0.0),
        25 => (0.0,-1.0),
        26 => (1.0,0.0),
        27 => (0.0,-1.0),
        28 => (1.0,0.0),
        29 => (0.0,-1.0),
        30 => (1.0,0.0),
        31 => (0.0,-1.0),
        32 => (1.0,0.0),
        33 => (0.70710678,-0.70710678),
        34 => (0.0,-1.0),
        35 => (-0.70710678,-0.70710678),
        36 => (1.0,0.0),
        37 => (0.70710678,-0.70710678),
        38 => (0.0,-1.0),
        39 => (-0.70710678,-0.70710678),
        40 => (1.0,0.0),
        41 => (0.70710678,-0.70710678),
        42 => (0.0,-1.0),
        43 => (-0.70710678,-0.70710678),
        44 => (1.0,0.0),
        45 => (0.70710678,-0.70710678),
        46 => (0.0,-1.0),
        47 => (-0.70710678,-0.70710678),
        48 => (1.0,0.0),
        49 => (0.92387953,-0.38268343),
        50 => (0.70710678,-0.70710678),
        51 => (0.38268343,-0.92387953),
        52 => (-0.0,-1.0),
        53 => (-0.38268343,-0.92387953),
        54 => (-0.70710678,-0.70710678),
        55 => (-0.92387953,-0.38268343),
        56 => (1.0,0.0),
        57 => (0.92387953,-0.38268343),
        58 => (0.70710678,-0.70710678),
        59 => (0.38268343,-0.92387953),
        60 => (-0.0,-1.0),
        61 => (-0.38268343,-0.92387953),
        62 => (-0.70710678,-0.70710678),
        63 => (-0.92387953,-0.38268343),
        64 => (1.0,0.0),
        65 => (0.98078528,-0.19509032),
        66 => (0.92387953,-0.38268343),
        67 => (0.83146961,-0.55557023),
        68 => (0.70710678,-0.70710678),
        69 => (0.55557023,-0.83146961),
        70 => (0.38268343,-0.92387953),
        71 => (0.19509032,-0.98078528),
        72 => (0.0,-1.0),
        73 => (-0.19509032,-0.98078528),
        74 => (-0.38268343,-0.92387953),
        75 => (-0.55557023,-0.83146961),
        76 => (-0.70710678,-0.70710678),
        77 => (-0.83146961,-0.55557023),
        78 => (-0.92387953,-0.38268343),
        79 => (-0.98078528,-0.19509032)
    )
begin

    data_out <= data_out_s;

    run : process(clk, rst) is
    begin
        if rst = '1' then
            data_out_s <= (others => (0,0));
        elsif rising_edge(clk) then
            data_out_s <= fft_recursive(data_in, 32, 1, 0);
        end if;
    end process run;

end architecture rtl;